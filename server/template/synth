<html>
   <head>
       <title>Dubstep Pendulum</title>
       <script type="text/javascript" src="/static/js/jquery-1.10.2.min.js"></script>
       <script type="text/javascript" src="/static/js/socket.io.min.js"></script>
       <script type="text/javascript" src="/static/js/buffer-loader.js"></script>
       <link rel="stylesheet" type="text/css" href="/static/css/bootstrap.css">
   </head>
   <body style="background-color: #FFCC22">
       <div style="margin-top: 3em; text-align: center;">
           <h1>Dubstep Pendulum!</h1>
           <div style="margin-top: 3em;">
               <a class="btn btn-large" onclick="play()">Play</a>
               <a class="btn btn-large" onclick="pause()">Pause</a>
           </div>
       </div>
   </body>
<script>

// For build up, bring up filter freq from 0 - 1000hz
// For drop oscillate, between 0 - 1000Hz
// for fast, oscillate between

var STATE_IDLE  = 0;
var STATE_BUILD = 1;
var STATE_DROP  = 2;
var STATE_FAST  = 3
var state = STATE_IDLE;
var drop_t = 0;

var last_z = -3000, last_x = 0, last_y = 0, sign = 0, last_m;
var idle_threshold = 25;
var idle_loops = 2;
var idle_count = 0;
var state = STATE_IDLE;

var drop_duration = 1;
var drop_threshold = 250;
var drop_loops = 5;
var drop_count = 0;

// Modulation notes: 
// use gain node to scale to 200. 
// use another osc to be the modulating oscilator 

var max_volume = 1.0;
var build_volume = .8;
var drop_volume = 1.0;
var fast_volume = .9;

var ctx = new AudioContext();

//var osc = ctx.createOscillator()
//osc.type = "square";
//var osc2 = ctx.createOscillator()
//osc2.type = "square";

build_lp = ctx.createBiquadFilter();
build_lp.gain.value = 200;
build_lp.type = "lowpass";

drop_lp = ctx.createBiquadFilter();
drop_lp.type = "lowpass";
var drop_buffer = null;

fast_lp = ctx.createBiquadFilter();
fast_lp.gain.value = 200;
fast_lp.type = "lowpass";

var master_gain = ctx.createGain();
var build_gain = ctx.createGain();
var drop_gain = ctx.createGain();
var fast_gain = ctx.createGain();

drop_gain.gain.value = .0;
build_gain.gain.value = .0;
fast_gain.gain.value = .0;

bufferLoader = new BufferLoader(
    ctx,
    [ 'static/wav/build.wav', 'static/wav/drop.wav', 'static/wav/drop-bass-2.wav' ],
    finishedLoading
);
bufferLoader.load();

function finishedLoading(bufferList)
{
    master_gain.gain.value = max_volume;

    var build = ctx.createBufferSource(); 
    build.buffer = bufferList[0];               
    build.loop = true;
    build.connect(build_lp);
    build.start(0);                    

    drop_buffer = bufferList[1];

    var fast = ctx.createBufferSource(); 
    fast.buffer = bufferList[2];               
    fast.loop = true;
    fast.connect(fast_lp);
    fast_gain.gain.value = 0;
    fast.start(0);                    

    build_lp.connect(build_gain);
    fast_lp.connect(fast_gain);

    build_gain.connect(master_gain);
    drop_gain.connect(master_gain);
    fast_gain.connect(master_gain);

    master_gain.connect(ctx.destination);
}

function play_sound(buffer, gain_node) 
{
    var source = ctx.createBufferSource(); 
    source.buffer = buffer;               
    source.connect(gain_node);
    source.start(0);                    
}

function play()
{
    master_gain.gain.value = max_volume;
}
function pause()
{
    master_gain.gain.value = 0;
}

function handler(t, x, y, z)
{
    if (last_z == -3000)
    {
        last_x = x;
        last_y = y;
        last_z = z;
    }

    if (Math.abs(last_x - x) < idle_threshold &&
        Math.abs(last_y - y) < idle_threshold &&
        Math.abs(last_z - z) < idle_threshold)
    {
        if (state == STATE_FAST || state == STATE_BUILD)
        {
            idle_count++;
            if (idle_count > idle_loops)
            {
                build_gain.gain.value = 0;
                drop_gain.gain.value = 0;
                fast_gain.gain.value = 0;
                console.log("idle");
                state = STATE_IDLE;
            }
        }
    }
    else
    {
        idle_count = 0;
        if (state == STATE_IDLE)
        {
            console.log("build");
            state = STATE_BUILD;
            build_gain.gain.value = build_volume;
            drop_gain.gain.value = 0;
            fast_gain.gain.value = 0;
        }
    }

    m = Math.sqrt((x * x) + (y * y) + (z * z));
    if (state == STATE_BUILD && last_m - m > drop_threshold)
    {
        console.log("drop!");
        state = STATE_DROP;

        drop_gain.gain.value = drop_volume;
        play_sound(drop_buffer, drop_gain);
        build_gain.gain.value = 0;
        fast_gain.gain.value = 0;
        drop_t = t;
    }

    if (state == STATE_DROP && t - drop_t > drop_duration)
    {
        console.log("fast!");
        state = STATE_FAST;
        drop_gain.gain.value = 0;
        build_gain.gain.value = 0;
        fast_gain.gain.value = fast_volume;
//        fast_gain.gain.setValueAtTime(0, ctx.currentTime);
//        fast_gain.gain.setTargetAtTime(fast_volume, ctx.currentTime + 0.01, 0.2);
        drop_t = 0;
    }

    s = (1.0 - (z / 500)) * 5
    f = 500 + (Math.sin(s) * 500);
//    if (state == STATE_BUILD)
//        console.log("build s " + s + " sin " + Math.sin(s));
    build_lp.frequency.value = f;

    // z based modulation
    //s = (1.0 - (z / 100)) * 8
    s = (m / 800);
    f = (Math.sin(s) * 1200);
//    if (state == STATE_FAST)
//        console.log("fast s " + s + " f " + f);
    fast_lp.frequency.value = f;

    last_x = x;
    last_y = y;
    last_z = z;
    last_m = m;
}

$(document).ready(function() 
{
    namespace = '/pendulum'; 
    var socket = io.connect('http://' + document.domain + ':' + location.port + namespace);
    socket.on('data', function(msg) {
        d = msg.data.split(",");
        handler(parseFloat(d[0]), parseFloat(d[1]), parseFloat(d[2]), parseFloat(d[3]));
    });
});

</script>
</body>
</html>
